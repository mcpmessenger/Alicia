#!/usr/bin/env python3
"""
APL Diagnostic Tool
Extracts the actual APL document being generated by Lambda
"""

import sys
import json

# Add your project imports
import os
os.chdir(os.path.dirname(os.path.abspath(__file__)))

from shopping_tools import product_search_tool

# Simulate Lambda environment
os.environ['AMAZON_PARTNER_TAG'] = 'aipro00-20'
os.environ['DYNAMODB_TABLE'] = 'ai-assistant-users-dev'

# Import Lambda function components
sys.path.insert(0, '.')

def test_apl_generation():
    """Test APL generation and extract JSON"""
    
    print("=" * 60)
    print("APL DIAGNOSTIC TOOL")
    print("=" * 60)
    
    # Simulate product search
    print("\n1. Searching for products...")
    tool_output = product_search_tool("headphones", None, None)
    tool_data = json.loads(tool_output)
    products = tool_data.get('products', [])
    
    print(f"   Found {len(products)} products")
    
    # Generate APL document
    print("\n2. Generating APL document...")
    
    # Import the function
    from lambda_ai_pro_secure import get_apl_document_products
    
    try:
        apl_doc = get_apl_document_products(products, "headphones")
        
        print("   ✅ APL document generated successfully")
        
        # Save to file for testing
        with open('extracted_apl_document.json', 'w') as f:
            json.dump(apl_doc, f, indent=2)
        
        print("\n3. APL saved to: extracted_apl_document.json")
        
        # Validate structure
        print("\n4. Validating structure...")
        print(f"   - Type: {apl_doc.get('type')}")
        print(f"   - Version: {apl_doc.get('version')}")
        print(f"   - Has mainTemplate: {('mainTemplate' in apl_doc)}")
        
        # Check background color
        main_template = apl_doc.get('mainTemplate', {})
        items = main_template.get('items', [])
        if items:
            first_item = items[0]
            bg = first_item.get('background')
            print(f"   - Background: {bg}")
            print(f"   - Background type: {type(bg)}")
        
        print("\n5. Next Steps:")
        print("   → Open: https://developer.amazon.com/alexa/console/ask/displays")
        print("   → Paste contents of 'extracted_apl_document.json'")
        print("   → Click 'Preview' to see if it renders")
        print("   → Check for any error messages")
        
        print("\n" + "=" * 60)
        print("DIAGNOSTIC COMPLETE")
        print("=" * 60)
        
        return True
        
    except Exception as e:
        print(f"\n   ❌ ERROR generating APL: {str(e)}")
        print(f"\n   Exception type: {type(e).__name__}")
        print(f"   Exception details: {e}")
        import traceback
        print("\n   Full traceback:")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_apl_generation()
    sys.exit(0 if success else 1)





